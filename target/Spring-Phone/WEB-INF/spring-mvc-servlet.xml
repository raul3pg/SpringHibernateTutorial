<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:oxm="http://www.springframework.org/schema/oxm"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd">

	<context:annotation-config />
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />

	<!--<bean class="com.tpg.mobile.web.PhoneController" />-->


     <!-- =================================================================================================
     Spring MVC needs the abitily to choose an appropriate view resolver depending on the specifics of the
     request. When a conventional text/html request is made, Spring MVC uses an InternalResourceViewResolver
     to delegate to a JSP view template. When an application/xml request is made by a web service consumer,
     Spring MVC uses a MarshallingView with a JAXB marshaller to provide an XML representation of BindablePhone.
     =================================================================================================        -->


    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="prefix" value="/WEB-INF/views"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
            </list>
        </property>
    </bean>

    <oxm:jaxb2-marshaller id="marshaller">
        <oxm:class-to-be-bound name="com.tpg.mobile.web.BindablePhone" />
    </oxm:jaxb2-marshaller>

    <bean name="phone" class="org.springframework.web.servlet.view.xml.MarshallingView">
        <constructor-arg ref="marshaller" />
    </bean>


    <!-- =================================================================================================
     Spring needs to know where it will find externalized messages. This is done with Java's resource bundle
     functionality, encapsulated in a Spring ResourceBundleMessageSource.
     =================================================================================================        -->

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages" />
    </bean>

</beans>